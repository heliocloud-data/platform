AWSTemplateFormatVersion: '2010-09-09'

# Parameters that are input either in the CLI or console when
# creating CloudFormation stack with template
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    AllowedPattern: ".+"
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
# AWS resources to create (ex. EC2, S3)
Resources:
  # Role to attach to EC2 instance
  EC2AdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      # RoleName: Daskhub-admin
  # S3 bucket to use for Kubernetes admin
  LoggingS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete # May want to eventually Retain if want to persist bucket
    Properties:
      #BucketName: daskhub-bucket
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true
  # S3 policy to give access to Kubernetes admin bucket, be able to get list of all buckets,
  # Get/List to public HelioCloud bucket
  HelioS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      # ManagedPolicyName: helio-dh-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: 0
            Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:ListBucketMultipartUploads'
              - 's3:AbortMultipartUpload'
              - 's3:ListBucketVersions'
              - 's3:CreateBucket'
              - 's3:ListBucket'
              - 's3:DeleteObject'
              - 's3:GetBucketLocation'
              - 's3:ListMultipartUploadParts'
            Resource:
              - !GetAtt LoggingS3Bucket.Arn
              - !Sub '${LoggingS3Bucket.Arn}/*'
          - Sid: 1
            Effect: Allow
            Action: 's3:ListAllMyBuckets'
            Resource: '*'
          - Sid: 2
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucketVersions'
              - 's3:ListBucket'
              - 's3:GetBucketLocation'
            Resource:
              - 'arn:aws:s3:::helio-public'
              - 'arn:aws:s3:::helio-public/*'
  K8AutoScalingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      # ManagedPolicyName: k8s-asg-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - 'autoscaling:DescribeAutoScalingGroups'
              - 'autoscaling:DescribeAutoScalingInstances'
              - 'autoscaling:DescribeLaunchConfigurations'
              - 'autoscaling:DescribeTags'
              - 'autoscaling:SetDesiredCapacity'
              - 'autoscaling:TerminateInstanceInAutoScalingGroup'
              - 'ec2:DescribeLaunchTemplateVersions'
            Resource: '*'
            Effect: Allow
  # Required IAM profile so we can attach admin role to EC2 instance
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      #InstanceProfileName: dask-ec2-instance-profile
      Path: /
      Roles:
       - !Ref EC2AdminRole
  # EC2 instance that will be admin to Kubernetes cluster
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups: [!Ref InstanceSecurityGroup]
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: helio
  # Security Group for EC2 instance, allow SSH location to be set by parameter
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
# Outputs available after stack is created
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
