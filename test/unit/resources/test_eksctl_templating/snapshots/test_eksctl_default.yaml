---
addons:
  - name: aws-ebs-csi-driver
    serviceAccountRoleARN: arn:aws:iam:::role/AmazonEKS_EBS_CSI_DriverRole-us-south-100-eks-helio
    version: v1.31.0-eksbuild.1
apiVersion: eksctl.io/v1alpha5
availabilityZones:
  - <INSERT_PRIMARY_AVAILABILITY_ZONE>
  - <INSERT_SECONDARY_AVAILABILITY_ZONE>
cloudWatch:
  clusterLogging:
    enableTypes:
      - '*'
iam:
  serviceAccounts:
    - attachPolicyARNs:
        - <<CNF_OUTPUT_CustomS3Arn>>
      metadata:
        labels:
          aws-usage: application
        name: helio-dh-role
    - attachPolicyARNs:
        - <<CNF_OUTPUT_CustomS3Arn>>
      metadata:
        name: helio-dh-role
        namespace: daskhub
    - attachPolicyARNs:
        - <<CNF_OUTPUT_ASGArn>>
      metadata:
        name: cluster-autoscaler
        namespace: kube-system
    - attachPolicyARNs:
        - <<CNF_OUTPUT_ASGArn>>
      metadata:
        name: admin
        namespace: kube-system
    - attachPolicyARNs:
        - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
      metadata:
        name: ebs-csi-controller-sa
        namespace: kube-system
      roleName: AmazonEKS_EBS_CSI_DriverRole-us-south-100-eks-helio
      roleOnly: true
    - attachPolicyARNs:
        - <<CNF_OUTPUT_Route53Arn>>
      metadata:
        name: external-dns
    - attachPolicyARNs:
        - <<CNF_OUTPUT_EFSMountArn>>
      metadata:
        name: efs-mount
        namespace: kube-system
  withOIDC: true
kind: ClusterConfig
managedNodeGroups:
  - availabilityZones:
      - <INSERT_PRIMARY_AVAILABILITY_ZONE>
    desiredCapacity: 2
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonRoute53AutoNamingRegistrantAccess
      withAddonPolicies:
        autoScaler: true
        awsLoadBalancerController: true
        cloudWatch: true
        ebs: true
        efs: true
        fsx: true
    instanceType: t3a.medium
    labels:
      hub.jupyter.org/node-purpose: core
      lifecycle: OnDemand
    maxSize: 3
    minSize: 2
    name: ng-daskhub-services
    tags:
      k8s.io/cluster-autoscaler/node-template/label/hub.jupyter.org/node-purpose: core
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: OnDemand
      k8s.io/cluster-autoscaler/node-template/label/node-purpose: core
    updateConfig:
      maxUnavailable: 1
  - availabilityZones:
      - <INSERT_PRIMARY_AVAILABILITY_ZONE>
    desiredCapacity: 0
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonRoute53AutoNamingRegistrantAccess
      withAddonPolicies:
        autoScaler: true
        awsLoadBalancerController: true
        cloudWatch: true
        ebs: true
        efs: true
        fsx: true
    instanceType: m5.2xlarge
    labels:
      hub.jupyter.org/node-purpose: user
      intent: apps
      lifecycle: OnDemand
      node-purpose: user
    maxSize: 15
    minSize: 0
    name: mng-user-compute
    tags:
      k8s.io/cluster-autoscaler/node-template/label/hub.jupyter.org/node-purpose: user
      k8s.io/cluster-autoscaler/node-template/label/intent: apps
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: OnDemand
      k8s.io/cluster-autoscaler/node-template/label/node-purpose: user
      k8s.io/cluster-autoscaler/node-template/taint/hub.jupyter.org/dedicated: user:NoSchedule
    taints:
      - effect: NoSchedule
        key: hub.jupyter.org/dedicated
        value: user
    updateConfig:
      maxUnavailable: 1
  - availabilityZones:
      - <INSERT_PRIMARY_AVAILABILITY_ZONE>
    desiredCapacity: 0
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonRoute53AutoNamingRegistrantAccess
      withAddonPolicies:
        autoScaler: true
        awsLoadBalancerController: true
        cloudWatch: true
        ebs: true
        efs: true
        fsx: true
    instanceType: m5.4xlarge
    labels:
      hub.jupyter.org/node-purpose: big-user
      intent: apps
      lifecycle: OnDemand
      node-purpose: big-user
    maxSize: 15
    minSize: 0
    name: mng-user-compute-big
    tags:
      k8s.io/cluster-autoscaler/node-template/label/hub.jupyter.org/node-purpose: big-user
      k8s.io/cluster-autoscaler/node-template/label/intent: apps
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: OnDemand
      k8s.io/cluster-autoscaler/node-template/label/node-purpose: big-user
      k8s.io/cluster-autoscaler/node-template/taint/hub.jupyter.org/dedicated: big-user:NoSchedule
    taints:
      - effect: NoSchedule
        key: hub.jupyter.org/dedicated
        value: big-user
    updateConfig:
      maxUnavailable: 1
  - availabilityZones:
      - <INSERT_PRIMARY_AVAILABILITY_ZONE>
    desiredCapacity: 0
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonRoute53AutoNamingRegistrantAccess
      withAddonPolicies:
        autoScaler: true
        awsLoadBalancerController: true
        cloudWatch: true
        ebs: true
        efs: true
        fsx: true
    instanceType: g4dn.xlarge
    labels:
      heliocloud.org/instance-type: xlarge
      hub.jupyter.org/node-purpose: user
      intent: apps
      k8s.amazonaws.com/accelerator: nvidia-tesla-t4
      lifecycle: OnDemand
      node-purpose: user
      nvidia.com/gpu: 'true'
    maxSize: 4
    minSize: 0
    name: mng-user-gpu-xlarge
    tags:
      k8s.io/cluster-autoscaler/node-template/label/hub.jupyter.org/node-purpose: user
      k8s.io/cluster-autoscaler/node-template/label/intent: apps
      k8s.io/cluster-autoscaler/node-template/label/k8s.amazonaws.com/accelerator: nvidia-tesla-t4
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: OnDemand
      k8s.io/cluster-autoscaler/node-template/label/node-purpose: user
      k8s.io/cluster-autoscaler/node-template/label/nvidia.com/gpu: 'true'
      k8s.io/cluster-autoscaler/node-template/taint/dedicated: nvidia.com/gpu=true
    taints:
      - effect: NoSchedule
        key: nvidia.com/gpu
        value: 'true'
      - effect: NoSchedule
        key: hub.jupyter.org/dedicated
        value: user
    updateConfig:
      maxUnavailable: 1
  - availabilityZones:
      - <INSERT_PRIMARY_AVAILABILITY_ZONE>
    desiredCapacity: 0
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonRoute53AutoNamingRegistrantAccess
      withAddonPolicies:
        autoScaler: true
        awsLoadBalancerController: true
        cloudWatch: true
        ebs: true
        efs: true
        fsx: true
    instanceType: g4dn.2xlarge
    labels:
      heliocloud.org/instance-type: 2xlarge
      hub.jupyter.org/node-purpose: user
      intent: apps
      k8s.amazonaws.com/accelerator: nvidia-tesla-t4
      lifecycle: OnDemand
      node-purpose: user
      nvidia.com/gpu: 'true'
    maxSize: 4
    minSize: 0
    name: mng-user-gpu-2xlarge
    tags:
      k8s.io/cluster-autoscaler/node-template/label/hub.jupyter.org/node-purpose: user
      k8s.io/cluster-autoscaler/node-template/label/intent: apps
      k8s.io/cluster-autoscaler/node-template/label/k8s.amazonaws.com/accelerator: nvidia-tesla-t4
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: OnDemand
      k8s.io/cluster-autoscaler/node-template/label/node-purpose: user
      k8s.io/cluster-autoscaler/node-template/label/nvidia.com/gpu: 'true'
      k8s.io/cluster-autoscaler/node-template/taint/dedicated: nvidia.com/gpu=true
    taints:
      - effect: NoSchedule
        key: nvidia.com/gpu
        value: 'true'
      - effect: NoSchedule
        key: hub.jupyter.org/dedicated
        value: user
    updateConfig:
      maxUnavailable: 1
  - availabilityZones:
      - <INSERT_PRIMARY_AVAILABILITY_ZONE>
    desiredCapacity: 0
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonRoute53AutoNamingRegistrantAccess
      withAddonPolicies:
        autoScaler: true
        awsLoadBalancerController: true
        cloudWatch: true
        ebs: true
        efs: true
        fsx: true
    instanceType: g4dn.4xlarge
    labels:
      heliocloud.org/instance-type: 4xlarge
      hub.jupyter.org/node-purpose: user
      intent: apps
      k8s.amazonaws.com/accelerator: nvidia-tesla-t4
      lifecycle: OnDemand
      node-purpose: user
      nvidia.com/gpu: 'true'
    maxSize: 4
    minSize: 0
    name: mng-user-gpu-4xlarge
    tags:
      k8s.io/cluster-autoscaler/node-template/label/hub.jupyter.org/node-purpose: user
      k8s.io/cluster-autoscaler/node-template/label/intent: apps
      k8s.io/cluster-autoscaler/node-template/label/k8s.amazonaws.com/accelerator: nvidia-tesla-t4
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: OnDemand
      k8s.io/cluster-autoscaler/node-template/label/node-purpose: user
      k8s.io/cluster-autoscaler/node-template/label/nvidia.com/gpu: 'true'
      k8s.io/cluster-autoscaler/node-template/taint/dedicated: nvidia.com/gpu=true
    taints:
      - effect: NoSchedule
        key: nvidia.com/gpu
        value: 'true'
      - effect: NoSchedule
        key: hub.jupyter.org/dedicated
        value: user
    updateConfig:
      maxUnavailable: 1
metadata:
  name: eks-helio
  region: us-south-100
  tags:
    Product: daskhub
    Project: heliocloud
  version: '1.30'
nodeGroups:
  - availabilityZones:
      - <INSERT_PRIMARY_AVAILABILITY_ZONE>
    desiredCapacity: 0
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonRoute53AutoNamingRegistrantAccess
      withAddonPolicies:
        autoScaler: true
        awsLoadBalancerController: true
        cloudWatch: true
        ebs: true
        efs: true
        fsx: true
    instancesDistribution:
      instanceTypes:
        - m5n.8xlarge
        - m5.8xlarge
        - m4.8xlarge
        - m5dn.8xlarge
        - r5n.8xlarge
        - r5dn.8xlarge
      onDemandBaseCapacity: 1
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: lowest-price
    labels:
      aws.amazon.com/spot: 'true'
      hub.jupyter.org/node-purpose: user
      intent: apps
      lifecycle: Ec2Spot
      node-purpose: user
    maxSize: 10
    minSize: 0
    name: ng-burst-compute-spot
    tags:
      k8s.io/cluster-autoscaler/node-template/label/hub.jupyter.org/node-purpose: user
      k8s.io/cluster-autoscaler/node-template/label/intent: apps
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: Ec2Spot
      k8s.io/cluster-autoscaler/node-template/label/node-purpose: user
secretsEncryption:
  keyARN: <<CNF_OUTPUT_KMSArn>>
