# This file can update the JupyterHub Helm chart's default configuration values.
#
# For reference see the configuration reference and default values, but make
# sure to refer to the Helm chart version of interest to you!
#
# Introduction to YAML:     https://www.youtube.com/watch?v=cdLNKUoMc6c
# Chart config reference:   https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html
# Chart default values:     https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/HEAD/jupyterhub/values.yaml
# Available chart versions: https://jupyterhub.github.io/helm-chart/
#
rbac:
  enabled: true  # Create and use roles and service accounts on an RBAC-enabled cluster.

jupyterhub:
  debug:
    enabled: false
  cull:
    enabled: true
    timeout: 3600
    every: 300
  hub:
    image:
      name: jupyterhub/k8s-hub
      tag: "1.2.0"
    nodeSelector:
      lifecycle: OnDemand
    extraConfig:
      myConfig: |
        c.KubeSpawner.service_account = 'helio-dh-role'
    extraEnv:
      EXTRA_PIP_PACKAGES: >-
        boto3
        dask_gatway_server
    extraConfig:
      # Register Dask Gateway service and setup singleuser environment.
      00-add-dask-gateway-values: |
        # 1. Sets `DASK_GATEWAY__PROXY_ADDRESS` in the singleuser environment.
        # 2. Adds the URL for the Dask Gateway JupyterHub service.
        import os

        # These are set by jupyterhub.
        release_name = os.environ["HELM_RELEASE_NAME"]
        release_namespace = os.environ["POD_NAMESPACE"]

        if "PROXY_HTTP_SERVICE_HOST" in os.environ:
            # https is enabled, we want to use the internal http service.
            gateway_address = "http://{}:{}/services/dask-gateway/".format(
                os.environ["PROXY_HTTP_SERVICE_HOST"],
                os.environ["PROXY_HTTP_SERVICE_PORT"],
            )
            print("Setting DASK_GATEWAY__ADDRESS {} from HTTP service".format(gateway_address))
        else:
            gateway_address = "http://proxy-public/services/dask-gateway"
            print("Setting DASK_GATEWAY__ADDRESS {}".format(gateway_address))

        # Internal address to connect to the Dask Gateway.
        c.KubeSpawner.environment.setdefault("DASK_GATEWAY__ADDRESS", gateway_address)
        # Internal address for the Dask Gateway proxy.
        c.KubeSpawner.environment.setdefault("DASK_GATEWAY__PROXY_ADDRESS", "gateway://traefik-{}-dask-gateway.{}:80".format(release_name, release_namespace))
        # Relative address for the dashboard link.
        c.KubeSpawner.environment.setdefault("DASK_GATEWAY__PUBLIC_ADDRESS", "/services/dask-gateway/")
        # Use JupyterHub to authenticate with Dask Gateway.
        c.KubeSpawner.environment.setdefault("DASK_GATEWAY__AUTH__TYPE", "jupyterhub")

        # Adds Dask Gateway as a JupyterHub service to make the gateway available at
        # {HUB_URL}/services/dask-gateway
        service_url = "http://traefik-{}-dask-gateway.{}".format(release_name, release_namespace)
        for service in c.JupyterHub.services:
            if service["name"] == "dask-gateway":
                if not service.get("url", None):
                    print("Adding dask-gateway service URL")
                    service.setdefault("url", service_url)
                break
        else:
            print("dask-gateway service not found. Did you set jupyterhub.hub.services.dask-gateway.apiToken?")

  singleuser:
    startTimeout: 600
    storage:
      capacity: 100Gi
      extraVolumes:
        - name: dh-helio-efs
          persistentVolumeClaim:
            claimName: efs-persist
        - name: shm-volume
          emptyDir:
            medium: Memory
      extraVolumeMounts:
        - name: dh-helio-efs
          mountPath: /home/jovyan/efs
        - name: dh-helio-efs
          mountPath: /efs
        - name: shm-volume
          mountPath: /dev/shm
    networkTools:
      image:
        name: jupyterhub/k8s-network-tools
        tag: "1.2.0"
    initContainers:
      - name: nfs-fixer
        image: alpine:3
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: dh-helio-efs
          mountPath: /efs
        command:
        - sh
        - -c
        - (chmod 0775 /efs; chown 1000:100 /efs)
    profileList:
    - display_name: "Small Server"
      description: "Small notebook server. 1GB RAM/1 CPU reserved. Up to 4GB RAM/4 CPU as needed."
      default: true
      kubespawner_override:
        mem_guarantee: 1G
        mem_limit: 4G
        cpu_guarantee: 1
        cpu_limit: 4
    - display_name: "Large Server"
      description: "Large notebook server. 2GB RAM/2 CPU reserved. Up to 8GB RAM/4 CPU as needed."
      kubespawner_override:
        mem_guarantee: 2G
        mem_limit: 8G
        cpu_guarantee: 2
        cpu_limit: 4
    - display_name: "Extra Large Server"
      description: "Extra Large notebook server. 16GB RAM/4 CPU reserved."
      kubespawner_override:
        mem_guarantee: 13G
        mem_limit: 16G
        cpu_guarantee: 3
        cpu_limit: 4
    - display_name: "GPU Server"
      description: "Notebook server with access to an NVidia T4 GPU. 16GB RAM/4 CPU reserved."
      kubespawner_override:
        mem_guarantee: 13G
        mem_limit: 16G
        cpu_guarantee: 3
        cpu_limit: 4
        environment: {'NVIDIA_DRIVER_CAPABILITIES': 'compute,utility'}
        node_selector:
          nvidia.com/gpu: "true"
        tolerations: [{'key': 'nvidia.com/gpu','operator': 'Equal','value': 'true','effect': 'NoSchedule'},{'key': 'hub.jupyter.org/dedicated','operator': 'Equal','value': 'user','effect': 'NoSchedule'}]
        extra_resource_limits: {"nvidia.com/gpu": "1"}
    image:
      name: public.ecr.aws/q3h7b4o8/helio-notebook-py
      tag: "0.14_16"
      # name: 424120911029.dkr.ecr.us-east-2.amazonaws.com/helio-notebook-idl-test
      # tag: "v0.14_6"
    cpu:
      guarantee: 1
      limit: 4
    memory:
      guarantee: 1G
      limit: 4G
    extraEnv:
      DASK_GATEWAY__CLUSTER__OPTIONS__IMAGE: '{JUPYTER_IMAGE_SPEC}'
    serviceAccountName: helio-dh-role
    defaultUrl: "/lab"  # Use jupyterlab by default.
  proxy:
    secretSync:
      image:
        name: jupyterhub/k8s-secret-sync
        tag: "1.2.0"
    chp:
      nodeSelector:
        lifecycle: OnDemand
      image:
        name: jupyterhub/configurable-http-proxy
        tag: "4.5.0"
    traefik:
      image:
        name: traefik
        tag: "v2.4.11"
    #traefik:
    #  providers:
    #    kubernetesCRD:
    #      allowCrossNamespace: true

dask-gateway:
  enabled: true  # Enabling dask-gateway will install Dask Gateway as a dependency.
  # Futher Dask Gateway configuration goes here
  # See https://github.com/dask/dask-gateway/blob/master/resources/helm/dask-gateway/values.yaml

  traefik:
    image:
      name: traefik
      tag: "v2.6.3"

  gateway:
    prefix: "/services/dask-gateway"  # Users connect to the Gateway through the JupyterHub service.

    auth:
      type: jupyterhub  # Use JupyterHub to authenticate with Dask Gateway

   #readinessProbe:
      # Enables the readinessProbe.
      #enabled: true
      # Configures the readinessProbe.
      #initialDelaySeconds: 5
      #timeoutSeconds: 2
      #periodSeconds: 10
      #failureThreshold: 3

    extraConfig:
      optionHandler: |
        from dask_gateway_server.options import Options, Integer, Float, String
        def option_handler(options, user):
          extra_annotations = {
                  "hub.jupyter.org/username": user.name,
          }

          extra_labels = {
                  "hub.jupyter.org/username": user.name,
          }

          if ":" not in options.image:
              raise ValueError("When specifying an image you must also provide a tag")

          return {
              "image": options.image,
              "worker_cores": options.worker_cores,
              "worker_memory": int(options.worker_memory * 2 ** 30),
              "scheduler_extra_pod_annotations": extra_annotations,
              "worker_extra_pod_annotations": extra_annotations,
              "scheduler_extra_pod_labels": extra_labels,
              "worker_extra_pod_labels": extra_labels,
          }
        c.Backend.cluster_options = Options(
        #        String("image", default="pangeo/base-notebook:2022.09.06", label="Image"),
          String("image", default="public.ecr.aws/q3h7b4o8/helio-notebook-py:0.14_16", label="Image"),
          Integer("worker_cores", default=1, min=1, max=4, label="Worker Cores"),
          Float("worker_memory", default=1, min=1, max=8, label="Worker Memory (GiB)"),
          handler=option_handler,
        )
      idle: |
        # timeout after 30 minutes of inactivity
        c.KubeClusterConfig.idle_timeout = 1800

  traefik:
    service:
      type: ClusterIP  # Access Dask Gateway through JupyterHub. To access the Gateway from outside JupyterHub, this must be changed to a `LoadBalancer`.

dask-kubernetes:
  # Use dask-kubernetes, rather than Dask Gateway, for creating Dask Clusters.
  # Enabling this also requires
  # 1. Setting `jupyterhub.singleuser.serviceAccountName: daskkubernetes`.
  # 2. Ensuring that `dask-kubernetes` is in your singleuser environment.
  enabled: false

